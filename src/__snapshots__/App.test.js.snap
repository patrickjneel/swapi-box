// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Test should match the snap shot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="top"
>
          <Scrolling
                    film={Object {}}
          />
</div>,
        <div
          className="bottom"
>
          <Header
                    favorites={0}
                    location="people"
                    upDateData={[Function]}
          />
          <CardContainer
                    favorites={Array []}
                    itemData={Array []}
                    location="people"
                    updateFavorite={[Function]}
          />
</div>,
      ],
      "className": "App",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Scrolling
            film={Object {}}
/>,
          "className": "top",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "film": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Header
              favorites={0}
              location="people"
              upDateData={[Function]}
/>,
            <CardContainer
              favorites={Array []}
              itemData={Array []}
              location="people"
              updateFavorite={[Function]}
/>,
          ],
          "className": "bottom",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "favorites": 0,
              "location": "people",
              "upDateData": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "favorites": Array [],
              "itemData": Array [],
              "location": "people",
              "updateFavorite": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="top"
>
            <Scrolling
                        film={Object {}}
            />
</div>,
          <div
            className="bottom"
>
            <Header
                        favorites={0}
                        location="people"
                        upDateData={[Function]}
            />
            <CardContainer
                        favorites={Array []}
                        itemData={Array []}
                        location="people"
                        updateFavorite={[Function]}
            />
</div>,
        ],
        "className": "App",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Scrolling
              film={Object {}}
/>,
            "className": "top",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "film": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Header
                favorites={0}
                location="people"
                upDateData={[Function]}
/>,
              <CardContainer
                favorites={Array []}
                itemData={Array []}
                location="people"
                updateFavorite={[Function]}
/>,
            ],
            "className": "bottom",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "favorites": 0,
                "location": "people",
                "upDateData": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "favorites": Array [],
                "itemData": Array [],
                "location": "people",
                "updateFavorite": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
